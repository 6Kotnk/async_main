`timescale 1ns / 1ps

module el_latch#(
	parameter						ENC = "TWO_PHASE",
	parameter						RAIL_NUM = 2
)
(
//---------CTRL-----------------------
	input							rst,
//---------LINK-IN--------------------
	input							lat_i,
	input	[RAIL_NUM-1 : 0]		in,
//---------LINK-OUT-------------------
	output							ack_o,
	output	[RAIL_NUM-1 : 0]		out
//------------------------------------
);

localparam SUM_W = 32; //Could use clog2, dont want to risk it being unsuported

generate
	if (ENC == "TWO_PHASE")
	begin

		wire [IN_NUM-1:0] in_p;

		for (in_sig = 0; in_sig < IN_NUM; in_sig = in_sig + 1) 
		begin



			P p
			(
				.rst(rst),
				
				.en(en),
				.fb(out_r),
				.in(in),
				
				.out(in_p)
			);
		end

		reg [SUM_W - 1:0] sum = 0;
		reg out_r = 0;
		reg state = 0;

		integer in_idx;

		always@(*)
		begin
			sum = 0;
			for (in_idx = 0; in_idx < IN_NUM; in_idx = in_idx + 1)
			begin 
				sum = sum + (in_p[in_idx] ^^ state);
			end
			if(sum >= THRESHOLD )
			begin
				out_r = 1;
			end
			else
			begin
				out_r = 0;
			end
			if(&in)
			begin
				state = 1;
			end
			if(|(~in))
			begin
				state = 0;
			end
			
		end
		
		
	end
	else
	begin
		
		reg [SUM_W - 1:0] sum = 0;
		reg out_r = 0;

		integer in_idx;

		always@(*)
		begin
			sum = 0;
			for (in_idx = 0; in_idx < IN_NUM; in_idx = in_idx + 1)
			begin 
				sum = sum + (in[in_idx] ^^ state);
			end
			if(sum >= THRESHOLD )
			begin
				out_r = 1;
			end
			if(|(~in))
			begin
				out_r = 0;
			end
			
		end
		
	assign out = out_r;	

	end
endgenerate


endmodule
